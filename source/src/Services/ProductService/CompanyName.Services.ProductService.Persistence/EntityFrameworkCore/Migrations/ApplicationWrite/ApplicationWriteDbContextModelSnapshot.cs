// <auto-generated />
using System;
using System.Collections.Generic;
using CompanyName.Services.ProductService.Persistence.EntityFrameworkCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompanyName.Services.ProductService.Persistence.EntityFrameworkCore.Migrations.ApplicationWrite
{
    [DbContext(typeof(ApplicationWriteDbContext))]
    partial class ApplicationWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyName.Services.ProductService.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Category")
                        .HasColumnType("uuid")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "CompanyName.Services.ProductService.Domain.Products.Product.Money#Money", b1 =>
                        {
                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("price");
                        });

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_products_category");

                    b.HasIndex("CreatedAt", "IsDeleted")
                        .HasDatabaseName("ix_products_created_at_is_deleted");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("CK_products_currency_Enum", "currency IN ('usd', 'eur', 'gbp', 'try')");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
